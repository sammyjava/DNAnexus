#!/bin/bash
# trimmomatic-se 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of input_fq: '$input_fq'"
    echo "Value of ILLUMINACLIP: '$ILLUMINACLIP'"
    echo "Value of param1: '$param1'"
    echo "Value of param2: '$param2'"
    echo "Value of param3: '$param3'"
    echo "Value of param4: '$param4'"
    echo "Value of param5: '$param5'"
    echo "Value of param6: '$param6'"
    echo "Value of param7: '$param7'"
    echo "Value of param8: '$param8'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$input_fq" -o input_fq

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    java -jar trimmomatic-0.36.jar SE -phred33 -trimlog trim_log input_fq output_fq ILLUMINACLIP:$ILLUMINACLIP $param1 $param2 $param3 $param4 $param5 $param6 $param7 $param8

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    output_fq=$(dx upload output_fq --brief)
    trim_log=$(dx upload trim_log --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output output_fq "$output_fq" --class=file
    dx-jobutil-add-output trim_log "$trim_log" --class=file

}
